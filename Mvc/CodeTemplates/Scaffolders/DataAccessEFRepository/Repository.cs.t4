<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.RepositoryNamespace)).Distinct()) { #>
using <#= ns #>;
<# } #>
using <#= Model.RepositoryInterfaceNamespace #>;

namespace <#= Model.RepositoryNamespace #>
{ 
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
	var modelVariable = modelName.ToLower();
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
#>
    public partial class <#= modelName #>Repository : Repository<<#= modelName #>>, I<#= modelName #>Repository
    {
		/// <summary>
        /// Create a new <#= modelVariable #> or update an existing <#= modelVariable #>
        /// </summary>
        public void InsertOrUpdate(<#= modelName #> <#= modelVariable #>)
        {
            if (<#= modelVariable #>.<#= Model.PrimaryKey #> == default(<#= primaryKeyProperty.Type.AsString #>)) 
			{
                // New entity
<# if(primaryKeyProperty.Type.AsString == "System.Guid") 
{ #>
                <#= modelVariable #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                _context.<#= modelNamePlural #>.AddObject(<#= modelVariable #>);
<# } 
   else 
   { #>
                _context.<#= modelNamePlural #>.Add(<#= modelVariable #>);
<# } #>
            } 
			else 
			{
                // Existing entity
<# if(isObjectContext) { #>
                _context.<#= modelNamePlural #>.Attach(<#= modelVariable #>);
                _context.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# }
else 
{ #>
                _context.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
            }
        }
		
		public IQueryable<<#= modelName #>> Find(IEnumerable<<#= primaryKeyProperty.Type.AsString#>> <#= modelVariable #>Ids)
        {
            return _context.<#= modelNamePlural #>.Where(t => <#= modelVariable #>Ids.Contains(t.<#= Model.PrimaryKey #>));
        }
    }
}