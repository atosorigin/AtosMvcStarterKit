<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;

namespace <#= Model.RepositoryNamespace #>
{ 
<# 
    var contextName = ((CodeType)Model.DbContextType).Name;	
#>
    public partial class Repository<T> where T:class
    {
        protected readonly <#= contextName #> _context = new <#= contextName #>();
		
       	public IQueryable<T> All
        {
            get { return _context.Set<T>(); }
        }

        public IQueryable<T> AllIncluding(params Expression<Func<T, object>>[] includeProperties)
        {
            IQueryable<T> query = _context.Set<T>();
            foreach (var includeProperty in includeProperties)
            {
                query = query.Include(includeProperty);
            }
            return query;
        }      

		/// <summary>
        /// Search for a single item
        /// </summary>
        public T Find(object id)
        {
            return _context.Set<T>().Find(id);
        }
		
 		public void Delete(object id)
        {
            var item = Find(id);
			if (null != item)
            {
				_context.Set<T>().Remove(item);
			}
        }

		/// <summary>
        /// Apply database context changes to the database
        /// </summary>
        public void Save()
        {
            _context.SaveChanges();
        }	  
    }
}